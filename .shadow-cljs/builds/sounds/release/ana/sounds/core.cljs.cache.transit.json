["^ ","~:output",["^ ","~:js","goog.provide('sounds.core');\nsounds.core.log = cljs.core.println;\nsounds.core.root = (60);\nsounds.core.alpha_to_midi_table = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"c\",\"c\",-1763192079),(0),new cljs.core.Keyword(null,\"d\",\"d\",1972142424),(2),new cljs.core.Keyword(null,\"e\",\"e\",1381269198),(4),new cljs.core.Keyword(null,\"f\",\"f\",-1597136552),(6),new cljs.core.Keyword(null,\"g\",\"g\",1738089905),(8),new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),(10),new cljs.core.Keyword(null,\"b\",\"b\",1482224470),(12)], null);\nsounds.core.alpha_to_midi = (function sounds$core$alpha_to_midi(alpha){\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(alpha))){\nvar letter = cljs.core.first(alpha);\nvar octave = cljs.core.second(alpha);\nreturn ((function (){var fexpr__8378 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(letter);\nreturn (fexpr__8378.cljs$core$IFn$_invoke$arity$1 ? fexpr__8378.cljs$core$IFn$_invoke$arity$1(sounds.core.alpha_to_midi_table) : fexpr__8378.call(null,sounds.core.alpha_to_midi_table));\n})() + ((12) * octave));\n} else {\nvar letter = cljs.core.first(alpha);\nvar mod = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.second(alpha),\"#\"))?(1):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.second(alpha),\"b\"))?(-1):null));\nvar octave = cljs.core.last(alpha);\nreturn ((mod + (function (){var fexpr__8379 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(letter);\nreturn (fexpr__8379.cljs$core$IFn$_invoke$arity$1 ? fexpr__8379.cljs$core$IFn$_invoke$arity$1(sounds.core.alpha_to_midi_table) : fexpr__8379.call(null,sounds.core.alpha_to_midi_table));\n})()) + ((12) * octave));\n}\n});\nsounds.core.midi_to_freq = (function sounds$core$midi_to_freq(midi){\nvar fexpr__8380 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.str.cljs$core$IFn$_invoke$arity$1(midi));\nreturn (fexpr__8380.cljs$core$IFn$_invoke$arity$1 ? fexpr__8380.cljs$core$IFn$_invoke$arity$1(sounds.midi_freq.midi_to_freq) : fexpr__8380.call(null,sounds.midi_freq.midi_to_freq));\n});\nsounds.core.OSC = (function sounds$core$OSC(p__8382){\nvar map__8383 = p__8382;\nvar map__8383__$1 = (((((!((map__8383 == null))))?(((((map__8383.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8383.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__8383):map__8383);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8383__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar freq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8383__$1,new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278));\nvar gain = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8383__$1,new cljs.core.Keyword(null,\"gain\",\"gain\",1350925045));\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),(function (){var or__4185__auto__ = type;\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn \"sine\";\n}\n})(),new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278),(cljs.core.truth_(freq)?((typeof freq === 'string')?sounds.core.midi_to_freq(sounds.core.alpha_to_midi(freq)):freq\n):(440)\n),new cljs.core.Keyword(null,\"gain\",\"gain\",1350925045),(cljs.core.truth_(gain)?gain:0.25),new cljs.core.Keyword(null,\"default-dur\",\"default-dur\",640662375),(2000)], null));\n});\nsounds.core.a = sounds.midi_freq.midi_to_freq;\nsounds.core.set_type = (function sounds$core$set_type(OSC,type){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(OSC,cljs.core.assoc,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),type);\n});\nsounds.core.set_freq = (function sounds$core$set_freq(OSC,freq){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(OSC,cljs.core.assoc,new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278),freq);\n});\nsounds.core.set_gain = (function sounds$core$set_gain(OSC,gain){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(OSC,cljs.core.assoc,new cljs.core.Keyword(null,\"gain\",\"gain\",1350925045),gain);\n});\nsounds.core.ctx = (new AudioContext());\nsounds.core.js_osc = (function sounds$core$js_osc(type,freq,gainVal){\nvar osc = sounds.core.ctx.createOscillator();\nvar gain = sounds.core.ctx.createGain();\n(osc[\"frequency\"][\"value\"] = freq);\n\n(osc[\"type\"] = type);\n\ngain.connect((sounds.core.ctx[\"destination\"]));\n\n(gain[\"gain\"][\"value\"] = gainVal);\n\nosc.connect(gain);\n\nosc.start();\n\nreturn osc;\n});\nsounds.core.play_OSC = (function sounds$core$play_OSC(OSC){\nvar map__8388 = cljs.core.deref(OSC);\nvar map__8388__$1 = (((((!((map__8388 == null))))?(((((map__8388.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8388.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__8388):map__8388);\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8388__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar freq = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8388__$1,new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278));\nvar gain = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8388__$1,new cljs.core.Keyword(null,\"gain\",\"gain\",1350925045));\nvar sound = sounds.core.js_osc(type,freq,gain);\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(OSC,cljs.core.assoc,new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050),sound);\n});\nsounds.core.stop_OSC = (function sounds$core$stop_OSC(OSC){\nvar temp__5733__auto__ = new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(OSC));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar instance = temp__5733__auto__;\ninstance.stop();\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(OSC,cljs.core.dissoc,new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050));\n} else {\nreturn (sounds.core.log.cljs$core$IFn$_invoke$arity$1 ? sounds.core.log.cljs$core$IFn$_invoke$arity$1(\"OSC was not playing!\") : sounds.core.log.call(null,\"OSC was not playing!\"));\n}\n});\nsounds.core.play_stop = (function sounds$core$play_stop(OSC,dur){\nsounds.core.play_OSC(OSC);\n\nreturn setTimeout((function (){\nreturn sounds.core.stop_OSC(OSC);\n}),dur);\n});\nsounds.core.play_freq = (function sounds$core$play_freq(OSC,freq,dur){\nsounds.core.set_freq(OSC,freq);\n\nreturn sounds.core.play_stop(OSC,dur);\n});\nsounds.core.play_note = (function sounds$core$play_note(OSC,note,dur){\nreturn sounds.core.play_freq(OSC,sounds.core.midi_to_freq(sounds.core.alpha_to_midi(note)),dur);\n});\nsounds.core._play_note = (function sounds$core$_play_note(note){\nreturn sounds.core.play_note(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),note,(200));\n});\nsounds.core.scale_to_midi = (function sounds$core$scale_to_midi(note){\n\nvar arr = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,(0),(2),(4),(5),(7),(9),(11),(12)], null);\nreturn cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arr,note);\n});\nsounds.core.parse_note = (function sounds$core$parse_note(note){\n\nvar components = clojure.string.split.cljs$core$IFn$_invoke$arity$2(note,/\\./);\nvar value = cljs.core.first(components);\nvar octave_shift = (((cljs.core.count(components) > (1)))?cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(components))):(0)\n);\nvar modifier = (((cljs.core.count(value) > (1)))?cljs.core.first(value):null\n);\nvar modifier_offset = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"b\",modifier))?(-1):((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"#\",modifier))?(1):(0)\n));\nvar key = cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last(value));\nif(cljs.core.truth_(or__4185__auto__)){\nreturn or__4185__auto__;\n} else {\nreturn (value.cljs$core$IFn$_invoke$arity$0 ? value.cljs$core$IFn$_invoke$arity$0() : value.call(null));\n}\n})());\nvar base_offset = sounds.core.scale_to_midi(key);\nreturn ((base_offset + modifier_offset) + ((12) * octave_shift));\n});\nsounds.core.scales = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"pentatonic\",\"pentatonic\",1003535103),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3),(5),(6)], null)),new cljs.core.Keyword(null,\"minor-pentatonic\",\"minor-pentatonic\",2096817591),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),\"b3\",(4),(5),\"b7\"], null)),new cljs.core.Keyword(null,\"minor\",\"minor\",-608536071),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),\"b3\",(4),(5),\"b6\",\"b7\"], null)),new cljs.core.Keyword(null,\"harmonic-minor\",\"harmonic-minor\",-1692225039),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),\"b3\",(4),(5),\"b6\",(7)], null))], null);\nsounds.core.rand_scale = (function sounds$core$rand_scale(key){\nvar scale = (key.cljs$core$IFn$_invoke$arity$1 ? key.cljs$core$IFn$_invoke$arity$1(sounds.core.scales) : key.call(null,sounds.core.scales));\nreturn cljs.core.rand_nth(scale);\n});\nsounds.core.interval = (function sounds$core$interval(fxn,int$){\nreturn setInterval(fxn,int$);\n});\nsounds.core.play_notes = (function sounds$core$play_notes(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___8490 = arguments.length;\nvar i__4790__auto___8491 = (0);\nwhile(true){\nif((i__4790__auto___8491 < len__4789__auto___8490)){\nargs__4795__auto__.push((arguments[i__4790__auto___8491]));\n\nvar G__8492 = (i__4790__auto___8491 + (1));\ni__4790__auto___8491 = G__8492;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((3) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((3)),(0),null)):null);\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4796__auto__);\n});\n\n(sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic = (function (OSC,notes,dur,p__8405){\nvar map__8406 = p__8405;\nvar map__8406__$1 = (((((!((map__8406 == null))))?(((((map__8406.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8406.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__8406):map__8406);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8406__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar base_note = (cljs.core.truth_(key)?sounds.core.alpha_to_midi(key):sounds.core.root\n);\nvar seq__8408 = cljs.core.seq(notes);\nvar chunk__8409 = null;\nvar count__8410 = (0);\nvar i__8411 = (0);\nwhile(true){\nif((i__8411 < count__8410)){\nvar note = chunk__8409.cljs$core$IIndexed$_nth$arity$2(null,i__8411);\nvar midi_8494 = (base_note + sounds.core.parse_note(note));\nvar freq_8495 = sounds.core.midi_to_freq(midi_8494);\nvar new_OSC_8496 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(OSC));\nsounds.core.play_freq(new_OSC_8496,freq_8495,dur);\n\n\nvar G__8499 = seq__8408;\nvar G__8500 = chunk__8409;\nvar G__8501 = count__8410;\nvar G__8502 = (i__8411 + (1));\nseq__8408 = G__8499;\nchunk__8409 = G__8500;\ncount__8410 = G__8501;\ni__8411 = G__8502;\ncontinue;\n} else {\nvar temp__5735__auto__ = cljs.core.seq(seq__8408);\nif(temp__5735__auto__){\nvar seq__8408__$1 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__8408__$1)){\nvar c__4609__auto__ = cljs.core.chunk_first(seq__8408__$1);\nvar G__8504 = cljs.core.chunk_rest(seq__8408__$1);\nvar G__8505 = c__4609__auto__;\nvar G__8506 = cljs.core.count(c__4609__auto__);\nvar G__8507 = (0);\nseq__8408 = G__8504;\nchunk__8409 = G__8505;\ncount__8410 = G__8506;\ni__8411 = G__8507;\ncontinue;\n} else {\nvar note = cljs.core.first(seq__8408__$1);\nvar midi_8508 = (base_note + sounds.core.parse_note(note));\nvar freq_8509 = sounds.core.midi_to_freq(midi_8508);\nvar new_OSC_8510 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(OSC));\nsounds.core.play_freq(new_OSC_8510,freq_8509,dur);\n\n\nvar G__8511 = cljs.core.next(seq__8408__$1);\nvar G__8512 = null;\nvar G__8513 = (0);\nvar G__8514 = (0);\nseq__8408 = G__8511;\nchunk__8409 = G__8512;\ncount__8410 = G__8513;\ni__8411 = G__8514;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(sounds.core.play_notes.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(sounds.core.play_notes.cljs$lang$applyTo = (function (seq8397){\nvar G__8398 = cljs.core.first(seq8397);\nvar seq8397__$1 = cljs.core.next(seq8397);\nvar G__8399 = cljs.core.first(seq8397__$1);\nvar seq8397__$2 = cljs.core.next(seq8397__$1);\nvar G__8400 = cljs.core.first(seq8397__$2);\nvar seq8397__$3 = cljs.core.next(seq8397__$2);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__8398,G__8399,G__8400,seq8397__$3);\n}));\n\nsounds.core.play_notes_delay = (function sounds$core$play_notes_delay(var_args){\nvar args__4795__auto__ = [];\nvar len__4789__auto___8518 = arguments.length;\nvar i__4790__auto___8520 = (0);\nwhile(true){\nif((i__4790__auto___8520 < len__4789__auto___8518)){\nargs__4795__auto__.push((arguments[i__4790__auto___8520]));\n\nvar G__8521 = (i__4790__auto___8520 + (1));\ni__4790__auto___8520 = G__8521;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4796__auto__ = ((((4) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((4)),(0),null)):null);\nreturn sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4796__auto__);\n});\n\n(sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic = (function (osc,notes,dur,delay,p__8422){\nvar map__8423 = p__8422;\nvar map__8423__$1 = (((((!((map__8423 == null))))?(((((map__8423.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8423.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__8423):map__8423);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8423__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar num_notes = cljs.core.count(notes);\nvar delays = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__8412_SHARP_){\nreturn (delay * p1__8412_SHARP_);\n}),cljs.core.range.cljs$core$IFn$_invoke$arity$1(num_notes));\nvar n__4666__auto__ = num_notes;\nvar i = (0);\nwhile(true){\nif((i < n__4666__auto__)){\nsetTimeout(((function (i,n__4666__auto__,num_notes,delays,map__8423,map__8423__$1,key){\nreturn (function (){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(osc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nth.cljs$core$IFn$_invoke$arity$2(notes,i)], null),dur,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),key], 0));\n});})(i,n__4666__auto__,num_notes,delays,map__8423,map__8423__$1,key))\n,cljs.core.nth.cljs$core$IFn$_invoke$arity$2(delays,i));\n\nvar G__8522 = (i + (1));\ni = G__8522;\ncontinue;\n} else {\nreturn null;\n}\nbreak;\n}\n}));\n\n(sounds.core.play_notes_delay.cljs$lang$maxFixedArity = (4));\n\n/** @this {Function} */\n(sounds.core.play_notes_delay.cljs$lang$applyTo = (function (seq8414){\nvar G__8415 = cljs.core.first(seq8414);\nvar seq8414__$1 = cljs.core.next(seq8414);\nvar G__8416 = cljs.core.first(seq8414__$1);\nvar seq8414__$2 = cljs.core.next(seq8414__$1);\nvar G__8417 = cljs.core.first(seq8414__$2);\nvar seq8414__$3 = cljs.core.next(seq8414__$2);\nvar G__8418 = cljs.core.first(seq8414__$3);\nvar seq8414__$4 = cljs.core.next(seq8414__$3);\nvar self__4776__auto__ = this;\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__8415,G__8416,G__8417,G__8418,seq8414__$4);\n}));\n\nsounds.core.feedback_key = \"e5\";\nsounds.core.success = (function sounds$core$success(){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"3\"], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.fifth = (function sounds$core$fifth(){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"5\"], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.cadence = (function sounds$core$cadence(){\nreturn sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"5.-1\"], null),(100),(100),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.continue$ = (function sounds$core$continue(){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"5.-1\"], null),(100),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.error = (function sounds$core$error(){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"b3\"], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.ready_for_input = (function sounds$core$ready_for_input(){\nreturn sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"3\"], null),(100),(100),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.unrecognized = (function sounds$core$unrecognized(){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"1\",\"b5\"], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),sounds.core.feedback_key], 0));\n});\nsounds.core.audio_feedback = cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"success\",\"success\",1890645906),sounds.core.success,new cljs.core.Keyword(null,\"continue\",\"continue\",-207346553),sounds.core.continue$,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),sounds.core.error,new cljs.core.Keyword(null,\"ready-for-input\",\"ready-for-input\",1830756619),sounds.core.ready_for_input,new cljs.core.Keyword(null,\"unrecognized\",\"unrecognized\",301694737),sounds.core.unrecognized], null));\ngoog.exportSymbol('sounds.core.audio_feedback', sounds.core.audio_feedback);\nsounds.core.make_melody = (function sounds$core$make_melody(num,tick_size,max_ticks,scale,key){\nvar melody = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\nvar elapsed = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0));\nvar delays = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__8454_SHARP_){\nreturn ((p1__8454_SHARP_ + (1)) * tick_size);\n}),cljs.core.range.cljs$core$IFn$_invoke$arity$1(max_ticks));\nvar notes = (((scale instanceof cljs.core.Keyword))?scale.cljs$core$IFn$_invoke$arity$1(sounds.core.scales):scale\n);\nvar n__4666__auto___8531 = num;\nvar i_8532 = (0);\nwhile(true){\nif((i_8532 < n__4666__auto___8531)){\nvar next_delay_8533 = cljs.core.rand_nth(delays);\nvar total_delay_8534 = (next_delay_8533 + cljs.core.deref(elapsed));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(elapsed,((function (i_8532,next_delay_8533,total_delay_8534,n__4666__auto___8531,melody,elapsed,delays,notes){\nreturn (function (current){\nreturn (current + next_delay_8533);\n});})(i_8532,next_delay_8533,total_delay_8534,n__4666__auto___8531,melody,elapsed,delays,notes))\n);\n\ncljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([total_delay_8534], 0));\n\nsetTimeout(((function (i_8532,next_delay_8533,total_delay_8534,n__4666__auto___8531,melody,elapsed,delays,notes){\nreturn (function (){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rand_nth(notes)], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),key], 0));\n});})(i_8532,next_delay_8533,total_delay_8534,n__4666__auto___8531,melody,elapsed,delays,notes))\n,total_delay_8534);\n\nvar G__8535 = (i_8532 + (1));\ni_8532 = G__8535;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn cljs.core.deref(elapsed);\n});\nsounds.core.shift_range = (function sounds$core$shift_range(max,offset){\nvar map_inc = (function (rge,incr){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__8459_SHARP_){\nreturn (p1__8459_SHARP_ + incr);\n}),rge);\n});\nreturn map_inc(cljs.core.range.cljs$core$IFn$_invoke$arity$1(max),offset);\n});\nsounds.core.get_rand_key = (function sounds$core$get_rand_key(octave_range){\nvar first_part = cljs.core.rand_nth(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\",\"c\"], null));\nvar modifier = cljs.core.rand_nth(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"#\",\"b\"], null));\nvar octave = cljs.core.rand_nth(sounds.core.shift_range(octave_range,(3)));\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(first_part),cljs.core.str.cljs$core$IFn$_invoke$arity$1(modifier),cljs.core.str.cljs$core$IFn$_invoke$arity$1(octave)].join('');\n});\nsounds.core.play_rand_pent = (function sounds$core$play_rand_pent(k){\nreturn sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic(sounds.core.OSC(cljs.core.PersistentArrayMap.EMPTY),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rand_nth(new cljs.core.Keyword(null,\"pentatonic\",\"pentatonic\",1003535103).cljs$core$IFn$_invoke$arity$1(sounds.core.scales))], null),(200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),k], 0));\n});\nsounds.core.play_rand_song = (function sounds$core$play_rand_song(){\nvar key = sounds.core.get_rand_key((3));\nvar total_time = sounds.core.make_melody((20),(300),(2),new cljs.core.Keyword(null,\"pentatonic\",\"pentatonic\",1003535103),key);\nvar osc = sounds.core.OSC(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278),key], null));\nreturn sounds.core.play_stop(osc,total_time);\n});\nsounds.core.play_rand_song_with = (function sounds$core$play_rand_song_with(k){\nvar key = sounds.core.get_rand_key((3));\nvar total_time = sounds.core.make_melody((20),(300),(2),k,key);\nvar osc = sounds.core.OSC(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"freq\",\"freq\",-1855845278),key], null));\nreturn sounds.core.play_stop(osc,total_time);\n});\nsounds.core.master_tick = cljs.core.atom.cljs$core$IFn$_invoke$arity$1((1));\nsounds.core.configure_beat = (function sounds$core$configure_beat(p__8467){\nvar map__8468 = p__8467;\nvar map__8468__$1 = (((((!((map__8468 == null))))?(((((map__8468.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8468.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__8468):map__8468);\nvar bpm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8468__$1,new cljs.core.Keyword(null,\"bpm\",\"bpm\",-1042376389));\nvar divisor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8468__$1,new cljs.core.Keyword(null,\"divisor\",\"divisor\",-25029120));\nreturn \"This will call the 'trigger pending\";\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","sounds/core.cljs","~:line",2,"~:column",5,"~:end-line",2,"~:end-column",16],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$sounds.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.reader","^G","~$reader","^G","~$sounds.midi-freq","^I","~$midi-freq","^I","~$cljs.core","^K","~$goog","^L"],"~:seen",["^@",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^K","^K","^G","^G","^H","^G"],"~:form",["~#list",["~$ns","^B",["^R",["^N",["^G","~:as","^H"],["^I","^T","^J"]]]]],"~:flags",["^ ","^N",["^@",[]]],"~:js-deps",["^ "],"~:deps",["^L","^K","^G","^I"]],"^D","^B","~:resource-id",["~:shadow.build.classpath/resource","sounds/core.cljs"],"~:compiled-at",1581792378012,"~:resource-name","sounds/core.cljs","~:warnings",[],"~:source",";;Thu Sep  1 16:49:44 CDT 2016\n(ns sounds.core\n  (:require [cljs.reader :as reader]\n            [sounds.midi-freq :as midi-freq]))\n\n(def log println)\n\n(def root 60) ;;defining \n\n(def alpha-to-midi-table\n  { \n   :c 0\n   :d 2\n   :e 4\n   :f 6\n   :g 8\n   :a 10 \n   :b 12 \n   } \n) \n\n\n(defn alpha-to-midi [alpha]\n  \"turns a#4 into midi number\" \n  (if (= 2 (count alpha))\n    (let [letter (first alpha)\n          octave (second alpha)]\n      (+ ( ( keyword letter) alpha-to-midi-table) (* 12 octave)))\n    ;;if not two then we assume three\n    (let [letter (first alpha)\n          mod (cond \n                (= (second alpha) \"#\") 1\n                (= (second alpha) \"b\") -1)\n          octave (last alpha)]\n      (+ mod ((keyword letter) alpha-to-midi-table) (* 12 octave)))))\n\n(defn midi-to-freq [midi]\n  ( (keyword (str midi)) midi-freq/midi-to-freq ))\n\n(defn OSC [{:keys [type freq gain]}]\n  (atom \n   {:type (or type \"sine\")\n    :freq (cond\n            freq (cond\n                   (string? freq) (-> freq \n                                      alpha-to-midi\n                                      midi-to-freq)\n                   :default freq)\n            :default 440)\n    :gain (if gain\n            gain \n            0.25)\n    :default-dur 2000}))\n\n(def a midi-freq/midi-to-freq)\n\n(defn set-type [OSC type]\n  (swap! OSC assoc :type type))\n\n(defn set-freq [OSC freq]\n  (swap! OSC assoc :freq freq))\n\n(defn set-gain [OSC gain]\n  (swap! OSC assoc :gain gain))\n\n(def ctx (js/AudioContext.)) \n\n(defn js_osc [ type freq gainVal ]  \n  (let [osc (.createOscillator ctx)\n        gain (.createGain ctx) ]\n    (aset osc \"frequency\" \"value\" freq)\n    (aset osc \"type\" type)\n    (.connect gain (aget ctx \"destination\"))\n    (aset gain \"gain\" \"value\" gainVal)\n    (.connect osc gain) \n    (.start osc)\n    osc))\n\n\n(defn play-OSC [OSC]\n  (let [{:keys [type freq gain]} @OSC\n        ;sound (.osc js/osc type freq gain)]\n        sound (js_osc type freq gain)]        \n    (swap! OSC assoc :instance sound)))\n\n(defn stop-OSC [OSC]\n  (if-let [instance (:instance @OSC)]\n    (do\n      (.stop instance)\n      (swap! OSC dissoc :instance))\n    (log \"OSC was not playing!\")))\n\n\n(defn play-stop [OSC dur]\n  (play-OSC OSC)\n  (js/setTimeout #(stop-OSC OSC) dur ))\n\n(defn play-freq\n  [OSC freq dur]\n  (set-freq OSC freq)\n  (play-stop OSC dur))\n\n(defn play-note \n  [OSC note dur]\n  (play-freq OSC (-> note alpha-to-midi midi-to-freq) dur))\n\n(defn _play-note  [note]\n  (play-note (OSC {}) note 200))\n  \n(defn scale-to-midi [note] \n  \"This function maps the scale off sets (scale number) to the midi offsets (chromatic)\n   This returns the number to add to the root midi note\" \n  (let [ arr [nil 0 2 4 5 7 9 11 12] ] \n    (nth arr note)))\n\n\n\n(defn parse-note [note] \n  \"This turns a note of the form b5.1 or #7.-2 into a midi (chromatic) offset \" \n  (let [components (clojure.string/split note #\"\\.\")\n        value (first components)\n        octave-shift (cond \n                       (> (count components) 1) (reader/read-string (str (last components)))\n                       :default 0)\n        modifier (cond \n                   (> (count value) 1) (first value)\n                   :default nil)\n        modifier-offset (cond \n                          (= \\b modifier) -1 \n                          (= \\# modifier) 1  \n                          :default 0)\n        key (reader/read-string (or \n                                      (str (last value))\n                                      (value)))\n        ;;_ (log key)\n        base-offset (scale-to-midi key)]\n    (+ base-offset modifier-offset (* 12 octave-shift))))\n\n\n\n\n(def scales \n  {\n   :pentatonic (map str [1 2 3 5 6])\n   :minor-pentatonic (map str [1 \"b3\" 4 5 \"b7\"])\n   :minor (map str [1 2 \"b3\" 4 5 \"b6\" \"b7\"])\n   :harmonic-minor (map str [1 2 \"b3\" 4 5 \"b6\" 7])\n  }\n)\n\n(defn rand-scale [key]\n  (let [scale (key scales)]\n    (rand-nth scale)))\n\n(defn interval [fxn int]\n  (js/setInterval fxn int))\n\n  \n\n;; FIGURE OUT THE ISSUE OF PLAYING MULTI NOTES SIMULTANEOUSLY\n\n(defn play-notes [OSC notes dur & {:keys [key]}]\n  (let [base-note (cond \n                      key (alpha-to-midi key)\n                      :default root)]\n    (doseq [note notes]\n      (let [midi (+ base-note (parse-note note) ) \n            freq (midi-to-freq midi)\n            new-OSC (atom @OSC)]\n        (play-freq new-OSC freq dur)))))\n\n(defn play-notes-delay [osc notes dur delay & {:keys [key]}]\n  (let [num-notes (count notes)\n        delays (map #(* delay %) (range num-notes))]\n    (dotimes [i num-notes]\n      (js/setTimeout #(play-notes osc [(nth notes i)] dur :key key) (nth delays i)))))\n\n\n(def feedback-key \"e5\") \n  \n;; now we can make functions for providing feedback\n(defn success []\n  (play-notes (OSC {}) [\"1\" \"3\"] 200 :key feedback-key))\n\n\n(defn fifth []\n  (play-notes (OSC {}) [\"1\" \"5\"] 200 :key feedback-key))\n\n(defn cadence []\n  (play-notes-delay (OSC {}) [\"1\" \"5.-1\"] 100 100 :key feedback-key))\n\n(defn continue []\n  (play-notes (OSC {}) [\"5.-1\"] 100 :key feedback-key))\n\n(defn error []\n  (play-notes (OSC {}) [\"1\" \"b3\"] 200 :key feedback-key))\n\n(defn ready-for-input []\n  (play-notes-delay (OSC {}) [\"1\" \"3\"] 100 100 :key feedback-key))\n\n(defn unrecognized []\n  (play-notes (OSC {}) [\"1\" \"b5\"] 200 :key feedback-key))\n\n(def ^:export  audio-feedback  ;; beautiful how this export allows you to get module access :) \n  (clj->js\n  {\n   :success success\n   :continue continue\n   :error   error\n   :ready-for-input ready-for-input \n   :unrecognized unrecognized\n   }\n  ) \n)\n\n;; We will have a function make melody \n;; you specify the number of notes you want, and the tick size (as well as max number of ticks between notes\n;; an atom is returned such that it contains the setTimeout for each note that \n;; will be played \n\n;; when an timeout matures then it will drop the oldest interval from the atom (its own)\n\n;; to stop the melody  you can map clearInterval through the atom \n\n(defn make-melody [num tick-size max-ticks scale key] \n  (let [melody (atom [])\n        elapsed (atom 0) \n        delays (map #(* (inc %) tick-size) (range max-ticks))\n        notes (cond\n                (keyword? scale) (scale scales)\n                :default scale)]\n    (dotimes [i num]\n      (let [next-delay (rand-nth delays)\n            total-delay (+ next-delay @elapsed)]\n        (swap! elapsed (fn [current] (+ current next-delay)))\n        (print total-delay)\n        (js/setTimeout #(play-notes (OSC {}) [(rand-nth notes)] 200 :key key) total-delay)))\n    @elapsed))\n\n(defn shift-range [max offset]\n  (let [map-inc (fn [rge incr] (map #(+ % incr) rge))]\n    (map-inc (range max) offset)))\n        \n(defn get-rand-key [octave-range]\n  (let [first-part (rand-nth [\"c\" \"d\" \"e\" \"f\" \"g\" \"a\" \"b\" \"c\"])\n        modifier   (rand-nth [\"#\" \"b\"])\n        octave     (rand-nth (shift-range octave-range 3))]\n    (str first-part modifier octave)))\n\n(defn play-rand-pent [k]\n  (play-notes (OSC {}) [(rand-nth (:pentatonic scales))] 200 :key k))\n\n(defn play-rand-song [] \n  (let [key (get-rand-key 3)\n        total-time (make-melody 20 300 2 :pentatonic key ) ;;this function starts the melody \n        osc (OSC {:freq key})]\n    (play-stop osc total-time))) ;;this plays bass note\n      \n    \n    \n(defn play-rand-song-with [k] \n  (let [key (get-rand-key 3)\n        total-time (make-melody 20 300 2 k key ) ;;this function starts the melody \n        osc (OSC {:freq key})]\n    (play-stop osc total-time))) ;;this plays bass note\n\n\n\n;; ------------------------- TIMER LOGIC  ---------------\n\n;; timer is just a software clock ticking away.. after being configure it will tick at a\n;; constant rate defined by (bpm/60)/divisor \"TICKS\" per second \n;; each time it ticks... it will call a handler function to process all the virtual notes\n;; which are in memory\n\n;; VIRTUAL NOTES (henceforth v-notes) \n;; lets say you want to play a note at the start of 2 measures from now ..\n;; and have it repeat every measure after that for 10 measures\n;; (send-to-master {\n;;                  :class \"measure\"\n;;                  :delay 2 \n;;                  :interval 1\n;;                  :life 10  ;; life will decrement every time the v-note is processed\n;;                            ;; !! PROVIDED that delay is nil (else delay is decremented) \n;;                  :note \"Ab.2\"\n;;                  :OSC (OSC \"sine\") ;; need to implement this arity \n;;                  }) \n\n\n;; classes\n;; So.. basically there are N ticks in a measure where N is equal to divisor\n;; each time that the the processor process a tick it will increment the master tick atom\n;; (when (= @master-tick divisor)\n;;   (reset! master-tick 1))\n;; this code should be run @ the end of the processing cycle!\n\n;; SO! in order to improve the performace of this code... as soon as all of the notes are\n;; dispatched for a given tick.. the processing for the next tick should occur...\n;; and it should return an object which JUST contains which notes should be PLAYED...\n;; THEN, when the tick actually occurs this object is used to play the notes\n;; kiiara gold \n\n\n(def master-tick (atom 1))\n\n;; two ways to trigger notes\n;; 1. @ next _specify_tick_class_here (repeat n times)\n;; 2. @ \n\n(defn configure-beat [{:keys [bpm divisor]}]\n  \"This will call the 'trigger pending\"\n  )\n\n\n\n\n    \n\n\n\n\n\n\n\n  \n  \n","~:reader-features",["^@",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["sounds.core/log","cljs.core/println","sounds.core/root","sounds.core/alpha-to-midi-table","sounds.core/alpha-to-midi","alpha","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","letter","cljs.core/first","octave","cljs.core/second","fexpr__8378","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","mod","cljs.core/last","fexpr__8379","sounds.core/midi-to-freq","midi","fexpr__8380","sounds.midi-freq/midi-to-freq","p__8382","map__8383","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sounds.core/OSC","type","freq","gain","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","or__4185__auto__","sounds.core/a","sounds.core/set-type","OSC","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","sounds.core/set-freq","sounds.core/set-gain","sounds.core/ctx","js/AudioContext","sounds.core/js_osc","gainVal","osc","sounds.core/play-OSC","map__8388","cljs.core/deref","sound","sounds.core/stop-OSC","temp__5733__auto__","instance","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","sounds.core/play-stop","dur","js/setTimeout","sounds.core/play-freq","sounds.core/play-note","note","sounds.core/_play-note","sounds.core/scale-to-midi","arr","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","sounds.core/parse-note","components","clojure.string.split.cljs$core$IFn$_invoke$arity$2","value","octave-shift","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","modifier","modifier-offset","key","base-offset","sounds.core/scales","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","sounds.core/rand-scale","scale","cljs.core/rand-nth","sounds.core/interval","fxn","int","js/setInterval","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","sounds.core/play-notes","p__8405","map__8406","seq8397","G__8398","cljs.core/next","G__8399","G__8400","self__4776__auto__","notes","base-note","seq__8408","cljs.core/seq","chunk__8409","count__8410","i__8411","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","new-OSC","sounds.core/play-notes-delay","p__8422","map__8423","seq8414","G__8415","G__8416","G__8417","G__8418","delay","num-notes","delays","p1__8412#","cljs.core.range.cljs$core$IFn$_invoke$arity$1","n__4666__auto__","i","sounds.core.play_notes.cljs$core$IFn$_invoke$arity$variadic","sounds.core/feedback-key","sounds.core/success","sounds.core/fifth","sounds.core/cadence","sounds.core.play_notes_delay.cljs$core$IFn$_invoke$arity$variadic","sounds.core/continue","sounds.core/error","sounds.core/ready-for-input","sounds.core/unrecognized","sounds.core/audio-feedback","cljs.core/clj->js","sounds.core/make-melody","num","tick-size","max-ticks","melody","elapsed","p1__8454#","cljs.core/Keyword","next-delay","total-delay","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","current","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","sounds.core/shift-range","max","offset","map-inc","rge","incr","p1__8459#","sounds.core/get-rand-key","octave-range","first-part","sounds.core/play-rand-pent","k","sounds.core/play-rand-song","total-time","sounds.core/play-rand-song-with","sounds.core/master-tick","p__8467","map__8468","sounds.core/configure-beat","bpm","divisor"]]],"~:cache-keys",["~#cmap",[["^Y","goog/dom/tagname.js"],[1581791472000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^@",[]],"~:deps-syms",["^L","~$goog.dom.HtmlElement"]]],["^Y","sounds/core.cljs"],[1578271661000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^G","^I"]]],["^Y","cljs/tools/reader/impl/utils.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","~$clojure.string","~$goog.string"]]],["^Y","goog/math/math.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","~$goog.array","~$goog.asserts"]]],["^Y","goog/html/trustedtypes.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/labs/useragent/browser.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^Y","goog/html/safeurl.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1E"]]],["^Y","goog/array/array.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B"]]],["^Y","goog/debug/error.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","sounds/midi_freq.cljs"],[1557108447000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K"]]],["^Y","cljs/tools/reader/edn.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1@","~$goog.string.StringBuffer"]]],["^Y","goog/dom/nodetype.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","cljs/tools/reader/impl/inspect.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K"]]],["^Y","cljs/tools/reader.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1M","^1N","^1O","^1L","^1A","^1@","^1Q"]]],["^Y","goog/string/typedstring.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/object/object.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/dom/asserts.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B"]]],"~:SHADOW-TIMESTAMP",[1581791475000,1581791472000],["^Y","goog/math/long.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","~$goog.reflect"]]],["^Y","goog/html/trustedresourceurl.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","~$goog.html.trustedtypes","^1H","^1I","^1J","^1K"]]],["^Y","goog/string/internal.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/functions/functions.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/html/safestyle.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","~$goog.html.SafeUrl","^1J","^1K","^1E"]]],["^Y","goog/dom/safe.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1U","^1G","~$goog.html.uncheckedconversions","^1J","^1E"]]],["^Y","goog/structs/map.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^Y","goog/html/safehtml.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","~$goog.dom.TagName","~$goog.dom.tags","^1Y","^1Z","~$goog.html.SafeStyleSheet","^1U","^1G","^1T","^1H","^1I","~$goog.labs.userAgent.browser","^1D","^1J","^1K","^1E"]]],["^Y","goog/dom/tags.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1D"]]],["^Y","cljs/reader.cljs"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1D","^1P","~$cljs.tools.reader.edn","^1Q"]]],["^Y","goog/asserts/asserts.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^Y","goog/uri/uri.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","^1@","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^Y","goog/i18n/bidi.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/fs/url.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/base.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",[]]],["^Y","goog/structs/structs.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1D"]]],["^Y","cljs/tools/reader/impl/errors.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1M","^1?","~$cljs.tools.reader.impl.inspect"]]],["^Y","clojure/string.cljs"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1@","^1Q"]]],["^Y","goog/string/string.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","~$goog.dom.safe","^1[","^1J","^1E"]]],["^Y","goog/reflect/reflect.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","goog/labs/useragent/util.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1E"]]],["^Y","goog/string/stringbuffer.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","cljs/tools/reader/reader_types.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1N","^1@","^1Q"]]],["^Y","goog/iter/iter.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","^1W","~$goog.math"]]],["^Y","goog/html/uncheckedconversions.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","^1X","^1Y","^1Z","^24","^1U","^1G","^1J","^1E"]]],["^Y","cljs/tools/reader/impl/commons.cljs"],[1556476600000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^K","^1L","^1M","^1N"]]],["^Y","goog/dom/htmlelement.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L"]]],["^Y","cljs/core.cljs"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["~$goog.math.Long","~$goog.math.Integer","^1@","^1D","^1A","~$goog.Uri","^1Q"]]],["^Y","goog/html/safescript.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","^1T","^1J","^1K"]]],["^Y","goog/html/safestylesheet.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","^1Z","^1D","^1J","^1K","^1E"]]],["^Y","goog/math/integer.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1S"]]],["^Y","goog/uri/utils.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1A","^1B","^1@"]]],["^Y","goog/string/const.js"],[1581791472000,"^1:",["^ ","^1;",null,"^1<",["^@",[]],"^1=",["^L","^1B","^1K"]]]]],"~:clj-info",["^ ","jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/reader.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1492109172000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1581791472000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1567658251000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1556476600000,"jar:file:/Users/oluwa/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1556476600000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","sounds/core.cljs","^7",2,"^8",5,"^9",2,"^:",16],"^;",["^ ","^<","^="],"^>",null,"^?",["^@",[]],"^A","^B","^E",null,"^F",["^ ","^G","^G","^H","^G","^I","^I","^J","^I","^K","^K","^L","^L"],"^M",["^@",["^N"]],"~:shadow/js-access-global",["^@",["AudioContext","setTimeout","setInterval"]],"^O",null,"~:defs",["^ ","~$interval",["^ ","~:protocol-inline",null,"^5",["^ ","^6","sounds/core.cljs","^7",155,"^8",7,"^9",155,"^:",15,"~:arglists",["^R",["~$quote",["^R",[["~$fxn","~$int"]]]]]],"^A","~$sounds.core/interval","^6","sounds/core.cljs","^:",15,"~:method-params",["^R",[["^3:","^3;"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^8",1,"~:variadic?",false,"^7",155,"~:ret-tag","~$js","^9",155,"~:max-fixed-arity",2,"~:fn-var",true,"^38",["^R",["^39",["^R",[["^3:","^3;"]]]]]],"~$play-freq",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",98,"^8",7,"^9",98,"^:",16,"^38",["^R",["^39",["^R",[["~$OSC","~$freq","~$dur"]]]]]],"^A","~$sounds.core/play-freq","^6","sounds/core.cljs","^:",16,"^3=",["^R",[["^3F","^3G","^3H"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",98,"^3A","^3B","^9",98,"^3C",3,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^3G","^3H"]]]]]],"~$ctx",["^ ","^A","~$sounds.core/ctx","^6","sounds/core.cljs","^7",66,"^8",1,"^9",66,"^:",9,"^5",["^ ","^6","sounds/core.cljs","^7",66,"^8",6,"^9",66,"^:",9],"~:tag","~$js/AudioContext"],"~$master-tick",["^ ","^A","~$sounds.core/master-tick","^6","sounds/core.cljs","^7",304,"^8",1,"^9",304,"^:",17,"^5",["^ ","^6","sounds/core.cljs","^7",304,"^8",6,"^9",304,"^:",17],"^3L","~$cljs.core/Atom"],"~$log",["^ ","^A","~$sounds.core/log","^6","sounds/core.cljs","^7",6,"^8",1,"^9",6,"^:",9,"^5",["^ ","^6","sounds/core.cljs","^7",6,"^8",6,"^9",6,"^:",9]],"~$alpha-to-midi-table",["^ ","^A","~$sounds.core/alpha-to-midi-table","^6","sounds/core.cljs","^7",10,"^8",1,"^9",10,"^:",25,"^5",["^ ","^6","sounds/core.cljs","^7",10,"^8",6,"^9",10,"^:",25],"^3L","~$cljs.core/IMap"],"~$play-rand-song-with",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",261,"^8",7,"^9",261,"^:",26,"^38",["^R",["^39",["^R",[["~$k"]]]]]],"^A","~$sounds.core/play-rand-song-with","^6","sounds/core.cljs","^:",26,"^3=",["^R",[["~$k"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",261,"^3A","^3B","^9",261,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["~$k"]]]]]],"~$a",["^ ","^A","~$sounds.core/a","^6","sounds/core.cljs","^7",55,"^8",1,"^9",55,"^:",7,"^5",["^ ","^6","sounds/core.cljs","^7",55,"^8",6,"^9",55,"^:",7],"^3L","^3U"],"~$configure-beat",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",310,"^8",7,"^9",310,"^:",21,"^38",["^R",["^39",["^R",[[["^ ","~:keys",["~$bpm","~$divisor"]]]]]]]],"^A","~$sounds.core/configure-beat","^6","sounds/core.cljs","^:",21,"^3=",["^R",[["~$p__8467"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",310,"^3A","~$string","^9",310,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[[["^ ","^3Z",["^3[","^40"]]]]]]]],"~$alpha-to-midi",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",23,"^8",7,"^9",23,"^:",20,"^38",["^R",["^39",["^R",[["~$alpha"]]]]]],"^A","~$sounds.core/alpha-to-midi","^6","sounds/core.cljs","^:",20,"^3=",["^R",[["^45"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",23,"^3A","~$number","^9",23,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^45"]]]]]],"~$play-notes-delay",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",172,"^8",7,"^9",172,"^:",23,"^38",["^R",["^39",["^R",[["~$osc","~$notes","^3H","~$delay","~$&",["^ ","^3Z",["~$key"]]]]]]],"~:top-fn",["^ ","^3@",true,"~:fixed-arity",4,"^3C",4,"^3=",[["^R",["^49","^4:","^3H","^4;",["^ ","^3Z",["^4<"]]]]],"^38",["^R",[["^49","^4:","^3H","^4;","~$&",["^ ","^3Z",["^4<"]]]]],"^3?",["^R",[null]]]],"^A","~$sounds.core/play-notes-delay","^6","sounds/core.cljs","^:",23,"^4=",["^ ","^3@",true,"^4>",4,"^3C",4,"^3=",[["^R",["^49","^4:","^3H","^4;",["^ ","^3Z",["^4<"]]]]],"^38",["^R",[["^49","^4:","^3H","^4;","~$&",["^ ","^3Z",["^4<"]]]]],"^3?",["^R",[null]]],"^3=",[["^R",["^49","^4:","^3H","^4;",["^ ","^3Z",["^4<"]]]]],"^3>",null,"^4>",4,"^3?",["^R",[null]],"^8",1,"^3@",true,"~:methods",[["^ ","^4>",4,"^3@",true,"^3L","~$clj-nil"]],"^7",172,"^3A","~$any","^9",172,"^3C",4,"^3D",true,"^38",["^R",[["^49","^4:","^3H","^4;","~$&",["^ ","^3Z",["^4<"]]]]]],"~$audio-feedback",["^ ","^5",["^ ","^6","sounds/core.cljs","^7",204,"^8",16,"^9",204,"^:",30,"~:export",true],"^A","~$sounds.core/audio-feedback","^6","sounds/core.cljs","^:",30,"^4D",true,"^8",1,"^7",204,"^9",204,"^3L","^4B"],"~$set-gain",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",63,"^8",7,"^9",63,"^:",15,"^38",["^R",["^39",["^R",[["^3F","~$gain"]]]]]],"^A","~$sounds.core/set-gain","^6","sounds/core.cljs","^:",15,"^3=",["^R",[["^3F","^4G"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",63,"^3A",["^@",[null,"^4B"]],"^9",63,"^3C",2,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^4G"]]]]]],"~$rand-scale",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",151,"^8",7,"^9",151,"^:",17,"^38",["^R",["^39",["^R",[["^4<"]]]]]],"^A","~$sounds.core/rand-scale","^6","sounds/core.cljs","^:",17,"^3=",["^R",[["^4<"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",151,"^3A",["^@",["^4B","^4A"]],"^9",151,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^4<"]]]]]],"~$set-type",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",57,"^8",7,"^9",57,"^:",15,"^38",["^R",["^39",["^R",[["^3F","~$type"]]]]]],"^A","~$sounds.core/set-type","^6","sounds/core.cljs","^:",15,"^3=",["^R",[["^3F","^4L"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",57,"^3A",["^@",[null,"^4B"]],"^9",57,"^3C",2,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^4L"]]]]]],"~$get-rand-key",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",244,"^8",7,"^9",244,"^:",19,"^38",["^R",["^39",["^R",[["~$octave-range"]]]]]],"^A","~$sounds.core/get-rand-key","^6","sounds/core.cljs","^:",19,"^3=",["^R",[["^4O"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",244,"^3A","^43","^9",244,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^4O"]]]]]],"~$_play-note",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",107,"^8",7,"^9",107,"^:",17,"^38",["^R",["^39",["^R",[["~$note"]]]]]],"^A","~$sounds.core/_play-note","^6","sounds/core.cljs","^:",17,"^3=",["^R",[["^4R"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",107,"^3A","^3B","^9",107,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^4R"]]]]]],"~$play-OSC",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",80,"^8",7,"^9",80,"^:",15,"^38",["^R",["^39",["^R",[["^3F"]]]]]],"^A","~$sounds.core/play-OSC","^6","sounds/core.cljs","^:",15,"^3=",["^R",[["^3F"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",80,"^3A",["^@",[null,"^4B"]],"^9",80,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^3F"]]]]]],"~$set-freq",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",60,"^8",7,"^9",60,"^:",15,"^38",["^R",["^39",["^R",[["^3F","^3G"]]]]]],"^A","~$sounds.core/set-freq","^6","sounds/core.cljs","^:",15,"^3=",["^R",[["^3F","^3G"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",60,"^3A",["^@",[null,"^4B"]],"^9",60,"^3C",2,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^3G"]]]]]],"~$fifth",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",186,"^8",7,"^9",186,"^:",12,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/fifth","^6","sounds/core.cljs","^:",12,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",186,"^3A","^4A","^9",186,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$js_osc",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",68,"^8",7,"^9",68,"^:",13,"^38",["^R",["^39",["^R",[["^4L","^3G","~$gainVal"]]]]]],"^A","~$sounds.core/js_osc","^6","sounds/core.cljs","^:",13,"^3=",["^R",[["^4L","^3G","^4["]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",68,"^3A","^3B","^9",68,"^3C",3,"^3D",true,"^38",["^R",["^39",["^R",[["^4L","^3G","^4["]]]]]],"~$shift-range",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",240,"^8",7,"^9",240,"^:",18,"^38",["^R",["^39",["^R",[["~$max","~$offset"]]]]]],"^A","~$sounds.core/shift-range","^6","sounds/core.cljs","^:",18,"^3=",["^R",[["^52","^53"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",240,"^3A","~$cljs.core/LazySeq","^9",240,"^3C",2,"^3D",true,"^38",["^R",["^39",["^R",[["^52","^53"]]]]]],"~$feedback-key",["^ ","^A","~$sounds.core/feedback-key","^6","sounds/core.cljs","^7",179,"^8",1,"^9",179,"^:",18,"^5",["^ ","^6","sounds/core.cljs","^7",179,"^8",6,"^9",179,"^:",18],"^3L","^43"],"~$continue",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",192,"^8",7,"^9",192,"^:",15,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/continue","^6","sounds/core.cljs","^:",15,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",192,"^3A","^4A","^9",192,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$scale-to-midi",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",110,"^8",7,"^9",110,"^:",20,"^38",["^R",["^39",["^R",[["^4R"]]]]]],"^A","~$sounds.core/scale-to-midi","^6","sounds/core.cljs","^:",20,"^3=",["^R",[["^4R"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",110,"^3A",["^@",["^4B","^4A"]],"^9",110,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^4R"]]]]]],"~$play-note",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",103,"^8",7,"^9",103,"^:",16,"^38",["^R",["^39",["^R",[["^3F","^4R","^3H"]]]]]],"^A","~$sounds.core/play-note","^6","sounds/core.cljs","^:",16,"^3=",["^R",[["^3F","^4R","^3H"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",103,"^3A","^3B","^9",103,"^3C",3,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^4R","^3H"]]]]]],"~$make-melody",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",225,"^8",7,"^9",225,"^:",18,"^38",["^R",["^39",["^R",[["~$num","~$tick-size","~$max-ticks","~$scale","^4<"]]]]]],"^A","~$sounds.core/make-melody","^6","sounds/core.cljs","^:",18,"^3=",["^R",[["^5?","^5@","^5A","^5B","^4<"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",225,"^3A","^4B","^9",225,"^3C",5,"^3D",true,"^38",["^R",["^39",["^R",[["^5?","^5@","^5A","^5B","^4<"]]]]]],"~$play-rand-song",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",253,"^8",7,"^9",253,"^:",21,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/play-rand-song","^6","sounds/core.cljs","^:",21,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",253,"^3A","^3B","^9",253,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$ready-for-input",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",198,"^8",7,"^9",198,"^:",22,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/ready-for-input","^6","sounds/core.cljs","^:",22,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",198,"^3A","^4A","^9",198,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$play-rand-pent",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",250,"^8",7,"^9",250,"^:",21,"^38",["^R",["^39",["^R",[["~$k"]]]]]],"^A","~$sounds.core/play-rand-pent","^6","sounds/core.cljs","^:",21,"^3=",["^R",[["~$k"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",250,"^3A","^4A","^9",250,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["~$k"]]]]]],"~$scales",["^ ","^A","~$sounds.core/scales","^6","sounds/core.cljs","^7",142,"^8",1,"^9",142,"^:",12,"^5",["^ ","^6","sounds/core.cljs","^7",142,"^8",6,"^9",142,"^:",12],"^3L","^3U"],"~$midi-to-freq",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",37,"^8",7,"^9",37,"^:",19,"^38",["^R",["^39",["^R",[["~$midi"]]]]]],"^A","~$sounds.core/midi-to-freq","^6","sounds/core.cljs","^:",19,"^3=",["^R",[["^5M"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",37,"^3A","^4B","^9",37,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^5M"]]]]]],"~$unrecognized",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",201,"^8",7,"^9",201,"^:",19,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/unrecognized","^6","sounds/core.cljs","^:",19,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",201,"^3A","^4A","^9",201,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$cadence",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",189,"^8",7,"^9",189,"^:",14,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/cadence","^6","sounds/core.cljs","^:",14,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",189,"^3A","^4A","^9",189,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$success",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",182,"^8",7,"^9",182,"^:",14,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/success","^6","sounds/core.cljs","^:",14,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",182,"^3A","^4A","^9",182,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$stop-OSC",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",86,"^8",7,"^9",86,"^:",15,"^38",["^R",["^39",["^R",[["^3F"]]]]]],"^A","~$sounds.core/stop-OSC","^6","sounds/core.cljs","^:",15,"^3=",["^R",[["^3F"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",86,"^3A",["^@",[null,"^4B"]],"^9",86,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^3F"]]]]]],"~$play-notes",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",162,"^8",7,"^9",162,"^:",17,"^38",["^R",["^39",["^R",[["^3F","^4:","^3H","~$&",["^ ","^3Z",["^4<"]]]]]]],"^4=",["^ ","^3@",true,"^4>",3,"^3C",3,"^3=",[["^R",["^3F","^4:","^3H",["^ ","^3Z",["^4<"]]]]],"^38",["^R",[["^3F","^4:","^3H","~$&",["^ ","^3Z",["^4<"]]]]],"^3?",["^R",[null]]]],"^A","~$sounds.core/play-notes","^6","sounds/core.cljs","^:",17,"^4=",["^ ","^3@",true,"^4>",3,"^3C",3,"^3=",[["^R",["^3F","^4:","^3H",["^ ","^3Z",["^4<"]]]]],"^38",["^R",[["^3F","^4:","^3H","~$&",["^ ","^3Z",["^4<"]]]]],"^3?",["^R",[null]]],"^3=",[["^R",["^3F","^4:","^3H",["^ ","^3Z",["^4<"]]]]],"^3>",null,"^4>",3,"^3?",["^R",[null]],"^8",1,"^3@",true,"^4@",[["^ ","^4>",3,"^3@",true,"^3L","^4A"]],"^7",162,"^3A","^4B","^9",162,"^3C",3,"^3D",true,"^38",["^R",[["^3F","^4:","^3H","~$&",["^ ","^3Z",["^4<"]]]]]],"~$root",["^ ","^A","~$sounds.core/root","^6","sounds/core.cljs","^7",8,"^8",1,"^9",8,"^:",10,"^5",["^ ","^6","sounds/core.cljs","^7",8,"^8",6,"^9",8,"^:",10],"^3L","^47"],"^3F",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",40,"^8",7,"^9",40,"^:",10,"^38",["^R",["^39",["^R",[[["^ ","^3Z",["^4L","^3G","^4G"]]]]]]]],"^A","~$sounds.core/OSC","^6","sounds/core.cljs","^:",10,"^3=",["^R",[["~$p__8382"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",40,"^3A","^3P","^9",40,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[[["^ ","^3Z",["^4L","^3G","^4G"]]]]]]]],"~$play-stop",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",94,"^8",7,"^9",94,"^:",16,"^38",["^R",["^39",["^R",[["^3F","^3H"]]]]]],"^A","~$sounds.core/play-stop","^6","sounds/core.cljs","^:",16,"^3=",["^R",[["^3F","^3H"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",94,"^3A","^3B","^9",94,"^3C",2,"^3D",true,"^38",["^R",["^39",["^R",[["^3F","^3H"]]]]]],"~$error",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",195,"^8",7,"^9",195,"^:",12,"^38",["^R",["^39",["^R",[[]]]]]],"^A","~$sounds.core/error","^6","sounds/core.cljs","^:",12,"^3=",["^R",[[]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",195,"^3A","^4A","^9",195,"^3C",0,"^3D",true,"^38",["^R",["^39",["^R",[[]]]]]],"~$parse-note",["^ ","^37",null,"^5",["^ ","^6","sounds/core.cljs","^7",118,"^8",7,"^9",118,"^:",17,"^38",["^R",["^39",["^R",[["^4R"]]]]]],"^A","~$sounds.core/parse-note","^6","sounds/core.cljs","^:",17,"^3=",["^R",[["^4R"]]],"^3>",null,"^3?",["^R",[null,null]],"^8",1,"^3@",false,"^7",118,"^3A","^47","^9",118,"^3C",1,"^3D",true,"^38",["^R",["^39",["^R",[["^4R"]]]]]]],"^P",["^ ","^K","^K","^G","^G","^H","^G"],"~:cljs.analyzer/constants",["^ ","^M",["^@",["~:divisor","~:freq","~:key","~:instance","~:continue","~:default-dur","~:default","~:ready-for-input","~:type","~:e","~:g","~:harmonic-minor","~:c","~:unrecognized","~:success","~:gain","~:b","~:minor-pentatonic","~:d","~:f","~:error","~:minor","~:bpm","~:a","~:pentatonic"]],"~:order",["~:c","~:d","~:e","~:f","~:g","~:a","~:b","^6@","^69","^6D","^6=","^6>","^6;","^6I","^6E","^6G","^6A","^6:","^6C","^6<","^6F","^6?","^6B","^6H","^68"]],"^U",["^ ","^N",["^@",[]]],"^V",["^ "],"^W",["^L","^K","^G","^I"]],"^D","^B","~:ns-specs",["^ "],"~:ns-spec-vars",["^@",[]],"~:compiler-options",["^19",[["^6M","~:static-fns"],true,["^6M","~:shadow-tweaks"],null,["^6M","~:elide-asserts"],true,["^6M","~:optimize-constants"],null,["^6M","^10"],null,["^6M","~:external-config"],null,["^6M","~:tooling-config"],null,["^6M","~:emit-constants"],null,["^6M","~:load-tests"],false,["^6M","~:form-size-threshold"],null,["^6M","~:infer-externs"],true,["^6M","^12"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^6M","~:fn-invoke-direct"],null,["^6M","~:source-map"],null]]]